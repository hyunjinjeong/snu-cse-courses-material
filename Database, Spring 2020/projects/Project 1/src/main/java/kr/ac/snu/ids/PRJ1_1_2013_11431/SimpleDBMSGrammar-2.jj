options
{
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)
package kr.ac.snu.ids.PRJ1_1_2013_11431;

import java.util.ArrayList;
import java.util.HashSet;

public class SimpleDBMSParser
{
  private static Schema schema;
  
  public static void main(String args[]) throws ParseException
  {
    // Load a schema instance.
    schema = Schema.getSchema();
    
    // Project 1-1 Parser
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    Message.printPrompt();
    
    while (true)
    {
      try
      {
        parser.command();
      }
      catch (ParseException e)
      {
        String msg;
        if (e.currentToken != null) {
          msg = Message.getMessage(Message.SYNTAX_ERROR);
        }
        else {
          msg = e.getMessage();
        }
        Message.print(msg);
        SimpleDBMSParser.ReInit(System.in);
        Message.printPrompt();
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)
 

SKIP : { < SPACE: " " > | <  TAB : "\t" > | < EOL : "\r\n" | "\n" | "\r" > }

/*
   According to the JavaCC's FAQ page (https://javacc.github.io/javacc/faq.html#question-3.3),
   there are three rules to identify the next token.
   1. The regular expression must describe a prefix of the remaining input stream.
   2. If more than one regular expression describes a prefix,
      then a regular expression that describes the longest prefix of the input stream is used
      (this is called the maximal munch rule).
   3. If more than one regular expression describes the longest possible prefix,
      then the regular expression that comes first in the .jj file is used.

      That is, the earlier the tokens are declared, the higher their priority is.
      Therefore, Keywords Tokens must be declared before LEGAL_IDENTIFIER in case of conflict.
*/


/*
   Keyword Tokens: The two-word tokens have been separated into the two tokens of one word.
*/
TOKEN :
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < DROP : "drop" >
| < SHOW : "show" >
| < DESC : "desc" >
| < SELECT : "select" >
| < INSERT : "insert" >
| < DELETE : "delete" >
| < TABLE : "table" >
| < TABLES : "tables" >
| < NULL : "null" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < INTO : "into" >
| < VALUES : "values" >
}   


/*
   Normal tokens
*/
TOKEN :
{
  < END : < SEMICOLON > (< SPACE > | < TAB >)* < EOL > > 
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < LEFT_PAREN : "(">
| < RIGHT_PAREN : ")">
| < COMMA : ",">
| < DOT : ".">
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < OPERATOR : "<=" | ">=" | "!=" | "<" | ">" | "=" >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < #SIGN : "+" | "-" >  
| < #DIGIT : [ "0"-"9" ] >
| < #NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < #NN : < DIGIT > < DIGIT > >
| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < #UNDERSCORE : "_" >
| < #QUOTE : "'" > 
| < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >
| < #NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "-" | "{" | "}"
    | "[" | "]" | "~" | "`" | "+" | "*" | "_" | "=" | "\\" | "(" | ")" | "<" | ">" | "?" | "," | "."  
    | "\n" | "\t" | "\r" | ":" | ";" | "|" | "/" >
| < UNEXPECTED: ~[] >
}


void command() :
{}
{
  queryList()
| (
    (
      < EXIT >
      (
        < SEMICOLON > | < END >
      )
    )
  | < EOF >
  )
  {
    // Close DB
    schema.closeDatabase();
    System.exit(0);
  }
}

void queryList() :
{}
{
  (
    query()
  )+
}

void query() :
{}
{
  createTableQuery()
| dropTableQuery()
| descQuery()
| showTablesQuery()
| insertQuery()
| deleteQuery()
| selectQuery()
}

/*
   CREATE TABLE START
*/
void createTableQuery() :
{
  String msg;
  String name;
  Table table = new Table();
}
{
  < CREATE >
  < TABLE >
  name = tableName()
  {
    table.setName(name);
  }
  tableElementList(table)
  (
    < END >
    {
      schema.createTable(table);
      msg = Message.getMessage(Message.CREATE_TABLE_SUCCESS, name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.createTable(table);
      msg = Message.getMessage(Message.CREATE_TABLE_SUCCESS, name);
      Message.print(msg);
    }  )
}

void tableElementList(Table t) :
{}
{
  < LEFT_PAREN >
  tableElement(t)
  (
    < COMMA >
    tableElement(t)
  )*
  < RIGHT_PAREN >
}

void tableElement(Table t) :
{}
{
  columnDefinition(t)
| tableConstraintDefinition(t)
}

void columnDefinition(Table t) :
{
  String name;
  Type type;
  Column c = new Column();
}
{
  name = columnName()
  {
    c.setName(name);
  }
  type = dataType()
  {
    c.setType(type);
  }
  (
    < NOT >
    < NULL >
    {
      c.setNotNull();
    }
  )?
  {
    schema.addColumn(t, c);
  }
}

void tableConstraintDefinition(Table t) :
{}
{
  primaryKeyConstraint(t)
| referentialConstraint(t)
}

void primaryKeyConstraint(Table t) :
{
  ArrayList<String> columnNameList;
}
{
  < PRIMARY >
  < KEY >
  columnNameList = columnNameList()
  {
    schema.addPrimaryKeys(t, columnNameList);
  }
}

void referentialConstraint(Table t) :
{
  ArrayList<String> referencing;
  ArrayList<String> referenced;
  String tableName;
}
{
  < FOREIGN >
  < KEY >
  referencing = columnNameList()
  < REFERENCES >
  tableName = tableName()
  referenced = columnNameList()
  {
    schema.addForeignKeys(referencing, referenced, t, tableName);
  }
}

ArrayList<String> columnNameList() :
{
  String name;
  ArrayList<String> columnList;
}
{
  {
    columnList = new ArrayList<String>();
  }
  < LEFT_PAREN >
  name = columnName()
  {
    columnList.add(name);
  }
  (
    < COMMA >
    name = columnName()
    {
      columnList.add(name);
    }
  )*
  < RIGHT_PAREN >
  {
    return columnList;
  }
}

Type dataType() :
{
  Type type;
  Token lengthToken;
  int intLength;
}
{
  (
    < INT >
    {
      type = schema.getType(Type.IntType);
    }
  | (
      < CHAR >
      < LEFT_PAREN >
      lengthToken = < INT_VALUE >
      < RIGHT_PAREN >
    )
    {
      intLength = Integer.parseInt(lengthToken.image);
      type = schema.getType(Type.CharType, intLength); 
    }
  | < DATE >
    {
      type = schema.getType(Type.DateType);
    }
  )
  {
    return type;
  }
}

String tableName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}

String columnName() :
{}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}
/*
   CREATE TABLE END
*/

/*
   DROP TABLE / DESC / SHOW TABLES START
*/
void dropTableQuery() :
{
  String msg;
  String name;
}
{
  < DROP >
  < TABLE >
  name = tableName()
  (
    < END >
    {
      schema.dropTable(name);
      msg = Message.getMessage(Message.DROP_SUCCESS, name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.dropTable(name);
      msg = Message.getMessage(Message.DROP_SUCCESS, name);
      Message.print(msg);
    }  )
}

void descQuery() :
{
  String msg;
  String name;
}
{
  < DESC >
  name = tableName()
  (
    < END >
    {
      msg = schema.desc(name);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = schema.desc(name);
      Message.print(msg);
    }  )
}

void showTablesQuery() :
{
  String msg;
}
{
  < SHOW >
  < TABLES >
  (
    < END >
    {
      msg = schema.showTables();
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = schema.showTables();
      Message.print(msg);
    }  )
}
/*
   DROP TABLE / DESC / SHOW TABLES END
*/

/*
   SELECT START
*/
void selectQuery() :
{
  String msg;
  SelectUtil selectUtil = new SelectUtil();
  Where.BooleanValueExpression bve = new Where.BooleanValueExpression();
}
{
  < SELECT >
  selectList(selectUtil)
  tableExpression(selectUtil, bve)
  (
    < END >
    {
      msg = schema.selectRecords(selectUtil, bve);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      msg = schema.selectRecords(selectUtil, bve);
      Message.print(msg);
    }  )
}

void selectList(SelectUtil selectUtil) :
{}
{
  (
    < ASTERISK >
  | (
      selectedColumn(selectUtil)
      (
        < COMMA >
        selectedColumn(selectUtil)
      )*
    )
  )
}

void selectedColumn(SelectUtil selectUtil) :
{
  String colName;
  String alias;
}
{
  colName = columnInTable()
  {
    alias = colName;
  }
  (
    < AS >
    alias = columnName()
  )?
  {
    selectUtil.addSelectedColumns(colName, alias);
  }
}

void period() :
{}
{
  < DOT >
}

/*
   Make a new term for duplicate expressions.
   < COLUMN IN TABLE > ::= [< TABLE NAME > < PERIOD >] < COLUMN NAME >
*/ 
String columnInTable() :
{
  String tName = null;
  String cName;
}
{
  (
    /*
       A lookahead of 2 is used here because both < TABLE NAME > and < COLUMN NAME > are < LEGAL IDENTIFIER >.
    */
    LOOKAHEAD(2)
    tName = tableName()
    period()
  )?
  cName = columnName()
  {
    return tName == null ? cName : tName + "." + cName;
  }
}

void tableExpression(SelectUtil selectUtil, Where.BooleanValueExpression bve) :
{}
{
  (
    fromClause(selectUtil)
    {
      for (Pair<String, String> columnAliasPair: selectUtil.getSelectedColumns()) {
        try { 
          ColumnInTable cit = selectUtil.getColumn(columnAliasPair.first());
        }
        catch (ParseException pe) {
          throw new ParseException(Message.getMessage(Message.SELECT_COLUMN_RESOLVE_ERROR, columnAliasPair.first()));  
        }
      }
    }
    (
      whereClause(selectUtil, bve)
    )?
  )
}

void fromClause(SelectUtil selectUtil) :
{}
{
  < FROM >
  tableReferenceList(selectUtil)
}

void tableReferenceList(SelectUtil selectUtil) :
{
  HashSet<String> tableSet = new HashSet<String>();
}
{
  (
    referedTable(selectUtil)
    (
      < COMMA >
      referedTable(selectUtil)
    )*
  )
  {
    for (Pair<String, String> nameAliasPair: selectUtil.getFromTables()) {
      if (schema.getTable(nameAliasPair.first()) == null) {
        throw new ParseException(Message.getMessage(Message.SELECT_TABLE_EXISTENCE_ERROR, nameAliasPair.first()));
      }
      if (tableSet.contains(nameAliasPair.second())) {
        throw new ParseException(Message.getMessage(Message.SELECT_DUPLICATE_TABLE_ALIAS_ERROR, nameAliasPair.second()));
      }
      tableSet.add(nameAliasPair.second());
    }
  }
}

void referedTable(SelectUtil selectUtil) :
{
  String tName;
  String alias;
}
{
  (
    tName = tableName()
    {
      alias = tName;
    }
    (
      < AS >
      alias = tableName()
    )?
  )
  {
    selectUtil.addFromTables(tName, alias);    
  }
}

void whereClause(SelectUtil selectUtil, Where.BooleanValueExpression bve) :
{}
{
  < WHERE >
  booleanValueExpression(selectUtil, bve)
}

void booleanValueExpression(SelectUtil selectUtil, Where.BooleanValueExpression bve) :
{}
{
  booleanTerm(selectUtil, bve)
  (
    < OR >
    booleanTerm(selectUtil, bve)
  )*
}

void booleanTerm(SelectUtil selectUtil, Where.BooleanValueExpression bve) :
{
  Where.BooleanTerm bt = new Where.BooleanTerm();
}
{
  booleanFactor(selectUtil, bt)
  (
    < AND >
    booleanFactor(selectUtil, bt)
  )*
  {
    bve.addBooleanTerm(bt);
  }
}

void booleanFactor(SelectUtil selectUtil, Where.BooleanTerm bt) :
{
  Where.BooleanFactor bf = new Where.BooleanFactor();
}
{
  (
    < NOT >
    {
      bf.setIsNot();
    }
  )?
  booleanTest(selectUtil, bf)
  {
    bt.addBooleanFactor(bf);
  }
}

void booleanTest(SelectUtil selectUtil, Where.BooleanFactor bf) :
{}
{
  (
    predicate(selectUtil, bf)
  | parenthesizedBooleanExpression(selectUtil, bf)
  )
}

void parenthesizedBooleanExpression(SelectUtil selectUtil, Where.BooleanFactor bf) :
{
  Where.BooleanValueExpression bve = new Where.BooleanValueExpression();
}
{
  < LEFT_PAREN >
  booleanValueExpression(selectUtil, bve)
  < RIGHT_PAREN >
  {
    bf.setBooleanTest(bve);
  }
}

void predicate(SelectUtil selectUtil, Where.BooleanFactor bf) :
{}
{
  /*
     comparisonPredicate() can be 'columnInTable() compOp() ...' and
     nullPredicate() can also become 'columnInTable() nullOperation()'. 
     Since the maximum number of tokens in columnInTable() is three,
     four tokens should be lookaheaded to determine which tokens are consumed.
     But a lookahead of 4 makes the parser much slower, so I have rewritten the grammar as below.
     <PREDICATE> ::= <COLUMN IN TABLE PREDICATE> | <COMPARABLE VALUE PREDICATE>
     <COLUMN IN TABLE PREDICATE> ::= <COLUMN IN TABLE> (<COMP OP> <COMP OPERAND> | <NULL OPERATION>)
     <COMPARABLE VALUE PREDICATE> ::= <COMPARABLE VALUE> <COMP OP> <COMP OPERAND>    
  */
  (
    columnInTablePredicate(selectUtil, bf)
  | comparableValuePredicate(selectUtil, bf)
  )
}

void columnInTablePredicate(SelectUtil selectUtil, Where.BooleanFactor bf) :
{
  Where.ColumnInTablePredicate citp = new Where.ColumnInTablePredicate();
  String colName;
  ColumnInTable cit;
  String op;
}
{
  colName = columnInTable()
  {
    cit = selectUtil.getColumn(colName);
    citp.setLeft(cit);
  }
  (
    (
      op = compOp()
      {
        citp.setOp(op);
      }
      compOperandCit(selectUtil, citp)
    )
    |
    (
      nullOperation(citp)
      {
        citp.setNullOperation();
      }
    )
  )
  {
    bf.setBooleanTest(citp); 
  }
}

void comparableValuePredicate(SelectUtil selectUtil, Where.BooleanFactor bf) :
{
  Where.ComparableValuePredicate cvp = new Where.ComparableValuePredicate();
  Value left;
  String op;
}
{
  left = comparableValue()
  {
    cvp.setLeft(left);
  }
  op = compOp()
  {
    cvp.setOp(op);
  }
  compOperand(selectUtil, cvp)
  {
    bf.setBooleanTest(cvp);
  }
}

void compOperandCit(SelectUtil selectUtil, Where.ColumnInTablePredicate citp) :
{
  Value v;
  ColumnInTable cit;
  String colName;
}
{
  v = comparableValue()
  {
    citp.setRight(v);
  }
| colName = columnInTable()
  {
    cit = selectUtil.getColumn(colName);
    citp.setRight(cit);
  }
}

void compOperand(SelectUtil selectUtil, Where.ComparableValuePredicate cvp) :
{
  Value v;
  ColumnInTable cit;
  String colName;
}
{
  v = comparableValue()
  {
    cvp.setRight(v);
  }
| colName = columnInTable()
  {
    
    cit = selectUtil.getColumn(colName);
    cvp.setRight(cit);
  }
}

String compOp() :
{}
{
  < OPERATOR >
  {
    return token.image;
  }
}

Value comparableValue() :
{
  Value v;
}
{
  < INT_VALUE >
  {
    v = new Value(new Type(Type.IntType), Integer.parseInt(token.image));
    return v;
  }
| < CHAR_STRING >
  {
    String val = token.image.substring(1, token.image.length()-1);
    v = new Value(new Type(Type.CharType), val);
    return v;
  }
| < DATE_VALUE >
  {
    v = new Value(new Type(Type.DateType), token.image);
    return v;
  }
}

void nullOperation(Where.ColumnInTablePredicate citp) :
{}
{
  < IS >
  (
    < NOT >
    {
      citp.setIsNot();
    }
  )?
  < NULL >
}
/*
   SELECT END
*/

/*
   INSERT / DELETE START
*/
void insertQuery() :
{
  String msg;
  String tableName;
  Pair<ArrayList<String>, ArrayList<Value>> columnsAndValues;
}
{
  < INSERT >
  < INTO >
  tableName = tableName()
  columnsAndValues = insertColumnAndSource()
  (
    < END >
    {
      schema.insertRecord(tableName, columnsAndValues.first(), columnsAndValues.second());
      msg = Message.getMessage(Message.INSERT_RESULT);
      Message.print(msg);
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      schema.insertRecord(tableName, columnsAndValues.first(), columnsAndValues.second());
      msg = Message.getMessage(Message.INSERT_RESULT);
      Message.print(msg);
    }
  )
}

Pair<ArrayList<String>, ArrayList<Value>> insertColumnAndSource() :
{
  ArrayList<String> columnNames = new ArrayList<String>();
  ArrayList<Value> values;
}
{
  (
    columnNames = columnNameList()
  )?
  values = valueList()
  {
    return new Pair<ArrayList<String>, ArrayList<Value>>(columnNames, values);
  }
}

ArrayList<Value> valueList() :
{
  Value v;
  ArrayList<Value> values = new ArrayList<Value>();
}
{
  < VALUES >
  < LEFT_PAREN >
  v = value()
  {
    values.add(v);
  }
  (
    < COMMA >
    v = value()
    {
      values.add(v);
    }
  )*
  < RIGHT_PAREN >
  {
    return values;
  }
}

Value value() :
{
  Value v;
}
{
  (
    < NULL >
    {
      v = new Value(new Type(Type.NullType));
    }
  | v = comparableValue()
  )
  {
    return v;
  }
}

void deleteQuery() :
{
  String msg;
  SelectUtil selectUtil = new SelectUtil();
  Pair<Integer, Integer> result;
  int deleteCnt;
  int failCnt;
  String tableName;
  Where.BooleanValueExpression bve = new Where.BooleanValueExpression();
}
{
  < DELETE >
  < FROM >
  tableName = tableName()
  {
    if (schema.getTable(tableName) == null) {
      throw new ParseException(Message.getMessage(Message.NO_SUCH_TABLE));
    }
    selectUtil.addFromTables(tableName, tableName);
  }
  (
    whereClause(selectUtil, bve)
  )?
  (
    < END >
    {
      result = schema.deleteRecord(tableName, bve);
      deleteCnt = result.first();
      failCnt = result.second();
      msg = Message.getMessage(Message.DELETE_RESULT, deleteCnt);
      Message.print(msg);
      if (failCnt > 0) {
        msg = Message.getMessage(Message.DELETE_REFERENTIAL_INTEGRITY_PASSED, failCnt);
        Message.print(msg);
      }
      Message.printPrompt();
    }
  | < SEMICOLON >
    {
      result = schema.deleteRecord(tableName, bve);
      deleteCnt = result.first();
      failCnt = result.second();
      msg = Message.getMessage(Message.DELETE_RESULT, deleteCnt);
      Message.print(msg);
      if (failCnt > 0) {
        msg = Message.getMessage(Message.DELETE_REFERENTIAL_INTEGRITY_PASSED, failCnt);
        Message.print(msg);
      }
    }  )
}
/*
   INSERT / DELETE END
*/